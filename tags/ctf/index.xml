<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ctf on nyancat0131</title><link>https://nyancat0131.moe/tags/ctf/</link><description>Recent content in ctf on nyancat0131</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Sep 2021 07:30:12 +0000</lastBuildDate><atom:link href="https://nyancat0131.moe/tags/ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>ALLES! CTF 2021 - ðŸ”¥ Counter Strike: Squirrel Offensive</title><link>https://nyancat0131.moe/ctf-writeups/alles-ctf/2021/csgo/</link><pubDate>Mon, 06 Sep 2021 07:30:12 +0000</pubDate><guid>https://nyancat0131.moe/ctf-writeups/alles-ctf/2021/csgo/</guid><description>This challenge involves an old version of CS:GO VScript, which is vulnerable to a UAF bug and a type confusion bug.
Resources on VScript can be found here.
Here is the exploit script.
UAF by resizing array in sort compare function The sort function of squirrel array is array_sort in sqbaselib.cpp, which will call _qsort:
// v: VM, o: array object, func: compare func _qsort(v, o, 0, _array(o)-&amp;gt;Size()-1, func); The r index passed into _qsort is fixed at the beginning, so by abusing array.</description></item></channel></rss>